#!/usr/bin/env -S python3 -u
#coding: utf-8
# Required: python3-pygame

import os
import time
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = '1'
import pygame as pg

timeout = 30 # Seconds
polldelay = .2 # Seconds
disx,disy = 480,320
winx,winy = 480,320
# If debug is False, no output
debug = True

# Initialize display
touchdev,touchdrv,videodrv = '/dev/input/event0','ads7846','x11'
os.environ['SDL_MOUSEDEV'] = touchdev
os.environ['SDL_MOUSEDRV'] = touchdrv
os.environ['SDL_VIDEODRVER'] = videodrv
os.environ['SDL_HINT_VIDEO_ALLOW_SCREENSAVER'] = '1'
pg.display.init()
dir = os.path.dirname(os.path.abspath(__file__))+'/'
iconimg = pg.image.load(dir+'icon.png')
pg.display.set_icon(iconimg)
pg.display.set_caption('piring')
pg.mouse.set_visible(False)
# Never use pg.FULLSCREEN as it messes up the touch readings
#win = pg.display.set_mode((0,0),pg.NOFRAME)
win = pg.display.set_mode((winx,winy),pg.NOFRAME)
bg,leftclick,middleclick = (0,0,0),1,2
ww,wh = pg.display.Info().current_w,pg.display.Info().current_h
fw,fh = ww/float(disx),wh/float(disy)
print(str(fw)+','+str(fh))
if debug: print(str(ww)+'x'+str(wh))
z,bw,bh,cx,cy = 0,ww>>1,wh>>1,ww>>2,wh>>2
btn,x,y,face,facebig,image,bigimg = 0,1,2,3,4,5,6
buttons = (['1',z,z,'1.png','1f.png',None,None],['3',bw,z,'3.png','3f.png',None,None],
	['2',z,bh,'2.png','2f.png',None,None],['4',bw,bh,'4.png','4f.png',None,None])
for b in buttons:
	img = pg.image.load(dir+b[face])
	b[image] = pg.transform.scale(img,(bw,bh))
	img = pg.image.load(dir+b[facebig])
	b[bigimg] = pg.transform.scale(img,(ww,wh))

logoimg = pg.image.load(dir+'logo.png')
logow,logoh = int(logoimg.get_width()*fw),int(logoimg.get_height()*fh)
logoimg = pg.transform.scale(logoimg,(logow,logoh))
logoleft,logoup = logow>>1,(logoh>>1)-int(logoh/9*fh)

cancelimg = pg.image.load(dir+'cancel.png')
confirmimg = pg.image.load(dir+'confirm.png')
# canceling and confirmimg are assumed to have the same dimensions
selectm,selectw,selecth = 10,int(confirmimg.get_width()*fw),int(confirmimg.get_height()*fh)
cancelimg = pg.transform.scale(cancelimg,(selectw,selecth))
confirmimg = pg.transform.scale(confirmimg,(selectw,selecth))

closeimg = pg.image.load(dir+'x.png')
closem,closew = 5,int(closeimg.get_width()*fw)
closeimg = pg.transform.scale(closeimg,(closew,closew))
state = dir+'state'

blank = False
touchtime = time.time()

while True: # Never stop
	selected = False # No button selected
	f = open(state,'w')
	f.write('0')
	f.close()
	while not selected: # Wait for selection
		confirmed = False # No button confirmed
		# Display buttons
		blank = False
		win.fill(bg)
		for b in buttons:
			win.blit(b[image],(b[x],b[y]))
		win.blit(logoimg,(bw-logoleft,bh-logoup))
		pg.display.flip()

		# Wait for one of the 4 buttons to be pressed
		pressed = False # No button pressed
		while not pressed:
			time.sleep(polldelay)
			# Check timeout for screen blanking
			if not blank and time.time() - touchtime > timeout:
				blank = True
				win.fill(bg)
				pg.display.flip()
			for event in pg.event.get():
				if event.type == pg.MOUSEBUTTONDOWN:
					# Middleclick terminates the interface but not the bell system
					if event.button == middleclick:
						pg.quit()
						os._exit(1)
					if event.button == leftclick:
						touchtime = time.time()
						# If screen blanked, don't register the next touch, just wake up
						if blank:
							blank = False
							for b in buttons:
								win.blit(b[image],(b[x],b[y]))
							win.blit(logoimg,(bw-logoleft,bh-logoup))
							pg.display.flip()
							continue # for event loop

						# Examine selection
						mx,my = event.pos
						if debug:
							print(str(mx)+','+str(my))
						# Check every button
						for b in buttons:
							if mx>b[x] and mx-bw<b[x] and my>b[y] and my-bh<b[y]:
								# Pressed button found
								pressed = True
								# Announcements selected without confirmation
								if b[btn] == '1':
									confirmed,selected = True,True
								else:
									# Show the pressed button with OK/cancel options
									blank = False
									win.fill(bg)
									win.blit(b[image],(cx,cy))
									win.blit(cancelimg,(selectm,selectm))
									win.blit(confirmimg,(selectm,wh-selecth-selectm))
									pg.display.flip()
								break # for b loop, (for event loop) + while not pressed loop

		# Button pressed, get confirmation if needed
		while not confirmed: # Wait for confirmation of alarm
			time.sleep(polldelay)
			# Blank out and don't select if timeout exceeded
			if not blank and time.time() - touchtime > timeout:
				blank = True
				confirmed = True
				selected = False
				win.fill(bg)
				pg.display.flip()
			for event in pg.event.get():
				if event.type == pg.MOUSEBUTTONDOWN and event.button == leftclick:
					touchtime = time.time()
					# Either selected or cancelled
					confirmed = True
					mx,my = event.pos
					if debug:
						print(str(mx)+','+str(my))
					if my>bh: # Lower half of the screen
						selected = True
					break # for event loop + while not confirmed loop

	# Selected: show selected button with close icon and pass it to ring-script
	Blank = False
	win.fill(bg)
	win.blit(b[bigimg],(0,0))
	win.blit(closeimg,(ww-closew-closem,closem))
	pg.display.flip()
	f = open(state,'w')
	f.write(b[btn])
	f.close()
	# Wait for the screen to be pressed
	closed = False
	while not closed: # Wait for close (screen press)
		time.sleep(polldelay)
		for event in pg.event.get():
			if event.type == pg.MOUSEBUTTONDOWN and event.button == leftclick:
				touchtime = time.time()
				closed = True
				break # for event loop + while not closed loop
