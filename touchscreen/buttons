#!/usr/bin/env python2.7
#coding: utf-8
# Required: python2.7 pygame

import pygame as pg
import os
import time

timeout = 30 # Seconds
touchscreen,driver = '/dev/input/by-path/platform-3f204000.spi-event','ads7846'
os.environ['SDL_MOUSEDRV'] = driver
os.environ['SDL_MOUSEDEV'] = touchscreen
ww,wh,bg,leftclick,middleclick = 480,320,(0,0,0),1,2
z,bw,bh,cx,cy = 0,ww/2,wh/2,ww/4,wh/4
btn,x,y,face,facebig = 0,1,2,3,4
buttons = (('1',z,z,'1.png','1f.png'),('3',bw,z,'3.png','3f.png'),
	('2',z,bh,'2.png','2f.png'),('4',bw,bh,'4.png','4f.png'))
dir = os.path.dirname(os.path.abspath(__file__))+'/'
close,cancel,confirm = dir+'x.png',dir+'cancel.png',dir+'confirm.png'
state,icon = dir+'state',dir+'icon.png'
# If debug is False, no writing to stderr
debug = True

# Initialize display
pg.display.init()
icn = pg.image.load(icon)
pg.display.set_icon(icn)
pg.display.set_caption('piring')
pg.mouse.set_visible(False)
# Never use FULLSCREEN as it messes up the touch readings
win = pg.display.set_mode((ww,wh),pg.NOFRAME)
blank = False
touchtime = time.time()

while True: # Never stop
	selected = False # No button selected
	f = open(state,'w')
	f.write('0')
	f.close()
	while not selected:
		confirmed = False # No button confirmed
		# Display buttons
		blank = False
		for b in buttons:
			img = pg.image.load(dir+b[face])
			win.blit(img,(b[x],b[y]))
		pg.display.flip()

		# Wait for one of the 4 buttons to be pressed
		chosen = False # No button pressed
		while not chosen:
			# Check timeout for screen blanking
			if not blank and time.time() - touchtime > timeout:
				blank = True
				win.fill(bg)
				pg.display.flip()
			for event in pg.event.get():
				if event.type == pg.MOUSEBUTTONDOWN:
					# Middleclick terminates the interface but not the bell system
					if event.button == middleclick:
						if debug: os.write(2,'aborted'+os.linesep)
						pg.quit()
						os._exit(1)
					if event.button == leftclick:
						touchtime = time.time()
						# If screen blanked, don't register the next touch, just wake up
						if blank:
							blank = False
							for b in buttons:
								img = pg.image.load(dir+b[face])
								win.blit(img,(b[x],b[y]))
							pg.display.flip()
							continue # for event loop

						# Examine selection
						mx,my = event.pos
						if debug: os.write(2,str(mx)+','+str(my)+os.linesep)
						# Check every button
						for b in buttons:
							if mx>b[x] and mx-bw<b[x] and my>b[y] and my-bh<b[y]:
								# Pressed button found
								chosen = True
								# Announcements selected without confirmation
								if b[btn] == '1':
									confirmed,selected = True,True
								else:
									# Show the chosen with OK/cancel option
									blank = False
									win.fill(bg)
									img = pg.image.load(dir+b[face])
									win.blit(img,(cx,cy))
									img = pg.image.load(cancel)
									win.blit(img,(10,10))
									img = pg.image.load(confirm)
									win.blit(img,(10,210))
									pg.display.flip()
								break # for b loop, (for event loop) + while not chosen loop

		# Button chosen, get confirmation if needed
		while not confirmed:
			# Blank out and don't select if timeout exceeded
			if not blank and time.time() - touchtime > timeout:
				blank = True
				confirmed = True
				selected = False
				win.fill(bg)
				pg.display.flip()
			for event in pg.event.get():
				if event.type == pg.MOUSEBUTTONDOWN and event.button == leftclick:
					touchtime = time.time()
					# Either selected or cancelled
					confirmed = True
					mx,my = event.pos
					if debug: os.write(2,str(mx)+','+str(my)+os.linesep)
					if my>bh: # Lower half of the screen
						selected = True
					break # for event loop + while not confirmed loop

	# Selected: show chosen option with close icon and pass it to ring-script
	Blank = False
	img = pg.image.load(dir+b[facebig])
	win.blit(img,(0,0))
	img = pg.image.load(close)
	win.blit(img,(425,5))
	pg.display.flip()
	f = open(state,'w')
	f.write(b[btn])
	f.close()
	# Wait for the screen to be pressed
	closed = False
	while not closed: # Screen touched: close
		for event in pg.event.get():
			if event.type == pg.MOUSEBUTTONDOWN and event.button == leftclick:
				touchtime = time.time()
				closed = True
				break # for event loop + while not closed loop
